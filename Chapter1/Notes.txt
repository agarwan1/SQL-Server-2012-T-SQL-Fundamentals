SQL Introduction
*SQL stands for Structured Query Language. SQL is a standard language that was designed to query and manage data in relational database management systems (RDBMSs).
*An RDBMS is a database management system based on the relational model (a semantic model for representing data), which in turn is based on two mathematical branches: set theory and predicate logic. 
*To the degree that SQL is based on the relational model, it is based on a firm foundation—applied mathematics.
*The relational model is language-independent. That is, you can implement the relational model with languages other than SQL—for example, with C# in a class model. 

ANI and ISO standard language
*SQL is both an ANSI and ISO standard language based on the relational model, designed for querying and managing data in an RDBMS.
*1987. Since 1986, the American National Standards Institute (ANSI) and
the International Organization for Standardization (ISO) have been releasing revisions for the SQL standard every few years.
*Interestingly, SQL resembles English and is also very logical. Unlike many programming languages,which use an imperative programming paradigm, SQL uses a declarative one. That is, SQL requires you to specify what you want to get and not how to get it, letting the RDBMS figure out the physical mechanics required to process your request.

DDL, DML and DCL
*SQL has several categories of statements, including Data Definition Language (DDL), Data Manipulation Language (DML), and Data Control Language (DCL). DDL deals with object definitions and includes statements such as CREATE, ALTER, and DROP. DML allows you to query and modify data and includes statements such as SELECT, INSERT, UPDATE, DELETE, TRUNCATE, and MERGE.
**TRUNCATE is a DDL statement, but in fact it is a DML statement. DCL deals with permissions and includes statements such as GRANT and REVOKE.

Set Theory
*Set theory, which originated with the mathematician Georg Cantor, is one of the mathematical branches on which the relational model is based.
*By a “set” we mean any collection M into a whole of definite, distinct objects m
(which are called the “elements” of M) of our perception or of our thought.
*A set should be considered a single entity.Your focus should be on the collection of objects as opposed to the individual objects that make up the collection.
*A set should be considered a single entity.
*When you write T-SQL queries against tables in a database (such as a table of
employees), you should think of the set of employees as a whole rather than the individual employees.
*Distinct means that every element of a set must be unique. Jumping ahead to tables in a database, you can enforce the uniqueness of rows in a table by defining key constraints. Without a key, you won’t be able to uniquely identify rows, and therefore the table won’t qualify as a set. Rather, the table would be a multiset or a bag.
*Phrase of our perception or of our thought implies that the definition of a set is subjective. Consider a classroom: One person might perceive a set of people, whereas another might perceive a set of students and a set of teachers. Therefore, you have a substantial amount of freedom in defining sets. When you design a data model for your database, the design process should carefully consider the subjective needs of the application to determine adequate definitions for the entities involved.
*object - the definition of a set is not restricted to physical objects such as cars or employees but rather is relevant to abstract objects as well, such as prime numbers or lines.
*The order in which set elements are listed is not important. The formal notation for listing set elements uses curly brackets: {a,b, c}. Because order has no relevance, you can express the same set as {b, a, c} or {b, c, a}.
*Jumping ahead to the set of attributes (called columns in SQL) that make up the header of a relation (called a table in SQL), an element is supposed to be identified by name—not by ordinal position.
*Similarly, consider the set of tuples (called rows by SQL) that make up the body of the relation; an element is identified by its key values—not by position. Many programmers have a hard time adapting
to the idea that, with respect to querying tables, there is no order among the rows. <b>In other words, a query against a table can return table rows in any order unless you explicitly request that the data be sorted in a specific way, perhaps for presentation purposes.</b>

Predicate Logic
*A predicate is a property or an expression that either holds or doesn’t hold—in other words, is either true or false.
*The relational model relies on predicates to maintain the logical integrity of the data and define its structure.
*One example of a predicate used to enforce integrity is a constraint defined in a table called Employees that allows only employees with a salary greater than zero to be stored in the table. <b>The predicate is “salary greater than zero” (T-SQL expression: salary > 0).</b>
*In set theory, you can use predicates to define sets. As an example of a finite set defined with a predicate, the set {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} can be defined as the set of all elements for which the following predicate holds true: “x is an integer greater than or equal to 0 and smaller than or equal to 9.”

Relational Model
*The goal of the relational model is to enable consistent representation of data with minimal or no redundancy and without sacrificing completeness, and to define data integrity (enforcement of data consistency) as part of the model. An RDBMS is supposed to implement the relational model and provide the means to store, manage, enforce the integrity of, and query data. The fact that the relational model is based on a strong mathematical foundation means that given a certain data model instance (from which a physical database will later be generated), you can tell with certainty when a design is flawed, rather than relying solely on intuition.

Propositions, Predicates, and Relations
*“Relational” actually pertains to the mathematical term relation. In set theory, a relation is a representation of a set.
*In the relational model, a relation is a set of related information, with the counterpart in SQL being a table—albeit not an exact counterpart. A key point in the relational model is that a single relation should represent a single set (for example, Customers). It is interesting to note that operations on relations (based on relational algebra) result in a relation (for example, a join between two relations).
*Relation is made of a header and a body. The header consists of a set of
attributes (called columns in SQL), where each element is identified by an attribute name and a type name. The body consists of a set of tuples (called rows in SQL), where each element is identified by a key.

Design Data Model for Database
*When you design a data model for a database, you represent all data with relations (tables).
*Start by identifying propositions that you will need to represent in your database.
*A proposition is an assertion or a statement that must be true or false. For example, the statement, “Employee Itzik Ben-Gan was born on February 12, 1971, and works in the IT department” is a proposition.
*If this proposition is true, it will manifest itself as a row in a table of Employees. A false proposition simply won’t manifest itself. This presumption is known as the close world assumption (CWA).
*formalize the propositions. You do this by taking out the actual data (the body
of the relation) and defining the structure (the heading of the relation)—for example, by creating predicates out of propositions. You can think of predicates as parameterized propositions. The heading of a relation comprises a set of attributes. Note the use of the term “set”; in the relational model, attributes are unordered and distinct. An attribute is identified by an attribute name and a type name.
For example, the heading of an Employees relation might consist of the following attributes (expressed as pairs of attribute names and type names): employeeid integer, firstname character string, lastname character string, birthdate date, departmentid integer.
*A type is one of the most fundamental building blocks for relations. A type constrains an attribute to a certain set of possible or valid values.
*For example, the type INT is the set of all integers in the
range –2,147,483,648 to 2,147,483,647. A type is one of the simplest forms of a predicate in a database because it restricts the attribute values that are allowed.